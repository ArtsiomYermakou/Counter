{"version":3,"sources":["Counter/CSS.module.css","store/countReducer.ts","Counter/Counter.tsx","App.tsx","serviceWorker.ts","store/redux-store.ts","index.tsx"],"names":["module","exports","InitialState","counterValue","countReducer","state","action","type","minValue","Counter","dispatch","useDispatch","count","useSelector","console","log","useState","setMinValue","maxValue","setMaxValue","disabledButton","setDisabledButton","reset","SetToMinValueAC","Monitor","props","className","s","data_red","data","data_blue","App","wrapper","btnAll","btn1","onClick","disabled","btn2","line","value","onChange","e","max","currentTarget","Number","ddd","min","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,qBAAqB,OAAS,oBAAoB,UAAY,uBAAuB,SAAW,sBAAsB,KAAO,kBAAkB,KAAO,kBAAkB,IAAM,iBAAiB,KAAO,oB,4MCEnPC,EAAe,CACjBC,aAAc,GA8BHC,EA3BM,WAAkE,IAAjEC,EAAgE,uDAAtCH,EAAcI,EAAwB,uCAClF,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,eACAF,EADP,CAEIF,aAAcE,EAAMF,aAAe,IAG3C,IAAK,gBACD,OAAO,eACAE,EADP,CAEIF,aAAcG,EAAOE,WAG7B,QACI,OAAOH,IC2FJI,MAtGf,WAGI,IAAMC,EAAWC,cACXC,EAAQC,aAAsC,SAAAR,GAAK,OAAIA,EAAMO,MAAMT,gBAEzEW,QAAQC,IAAIH,GANG,MAUeI,mBAAS,GAVxB,mBAUVR,EAVU,KAUAS,EAVA,OAWeD,mBAAS,GAXxB,mBAWVE,EAXU,KAWAC,EAXA,OAiB6BH,oBAAS,GAjBtC,mBAiBRI,EAjBQ,KAiBQC,EAjBR,KAkDTC,EAAQ,WACVZ,EDhCuB,SAACF,GAC5B,MAAO,CAACD,KAAM,gBAAiBC,YC+BlBe,CAAgBf,IACzBa,GAAkB,IAatB,SAASG,EAAQC,GACb,OAAOb,IAAUM,EACX,0BAAMQ,UAAWC,IAAEC,UAAWH,EAAMI,MACpC,0BAAMH,UAAWC,IAAEG,WAAYL,EAAMI,MAG/C,OACI,yBAAKH,UAAWC,IAAEI,KACd,yBAAKL,UAAWC,IAAEK,SACd,6BACI,wCAAiB,8BAErB,6BACI,kBAACR,EAAD,CAASK,KAAMjB,KAEnB,yBAAKc,UAAWC,IAAEM,QACd,4BAAQP,UAAWC,IAAEO,KAAMC,QA9D3C,WACQvB,EAAQM,GACRR,EDJR,CAACH,KAAM,cCMCW,EAAU,IAAON,GACjBS,GAAkB,IAyDgCe,SAAUhB,GAApD,OACA,4BAAQM,UAAWC,IAAEU,KAAMF,QAASb,GAApC,UAEJ,wBAAII,UAAWC,IAAEW,OACjB,yBAAKZ,UAAWC,IAAEM,QACd,6BACI,6CACA,2BAAO1B,KAAK,SAASgC,MAAOrB,EAAUsB,SA5DxC,SAACC,GACf,IAAIC,EAAMD,EAAEE,cAAcJ,MAGtBlB,EADAqB,GAAOlC,GAAYA,EAAW,GAKlCW,EAAYyB,OAAOF,QAsDP,yBAAKhB,UAAWC,IAAEkB,KACd,6CACA,2BAAOtC,KAAK,SAASgC,MAAO/B,EAAUgC,SArDxC,SAACC,GACf,IAAIK,EAAML,EAAEE,cAAcJ,MAGtBlB,EADAyB,EAAM5B,GAAYV,EAAW,GAKjCS,EAAY2B,OAAOE,QA+CP,4BAAQpB,UAAWC,IAAEkB,IAAKV,QAASb,GAAnC,WC7FLS,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCKQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCdAC,EAAcC,YAAgB,CAChCzC,MAAOR,IAGEkD,EAAQC,YAAYH,GCAjCI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GACnB,kBAAC,EAAD,OAFF,KAKAK,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.26c9f569.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"CSS_App__ESNBt\",\"wrapper\":\"CSS_wrapper__3q1eG\",\"btnAll\":\"CSS_btnAll__4YZ_z\",\"data_blue\":\"CSS_data_blue__1Lrkw\",\"data_red\":\"CSS_data_red__1PjuH\",\"btn1\":\"CSS_btn1__3kwXd\",\"btn2\":\"CSS_btn2__1cemu\",\"ddd\":\"CSS_ddd__ia1ho\",\"line\":\"CSS_line__1xTG6\"};","export type InitialStateType = typeof InitialState;\r\ntype ActionTypes = ReturnType<typeof incrementAC> | ReturnType<typeof SetToMinValueAC>\r\n\r\nconst InitialState = {\r\n    counterValue: 0\r\n}\r\n\r\nconst countReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"INCREMENT\": {\r\n            return {\r\n                ...state,\r\n                counterValue: state.counterValue + 1\r\n            }\r\n        }\r\n        case \"SET-MIN-VALUE\": {\r\n            return {\r\n                ...state,\r\n                counterValue: action.minValue\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const incrementAC = () => (\r\n    {type: \"INCREMENT\"} as const\r\n)\r\nexport const SetToMinValueAC = (minValue: number) => {\r\n    return {type: \"SET-MIN-VALUE\", minValue} as const\r\n}\r\n\r\nexport default countReducer;","import React, {useState} from 'react';\r\nimport s from \"./CSS.module.css\";\r\nimport {Monitor} from \"../Monitor\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/redux-store\";\r\nimport {incrementAC, InitialStateType, SetToMinValueAC} from \"../store/countReducer\";\r\n\r\ntype PropsType = {\r\n    data: any\r\n}\r\n\r\nfunction Counter() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const count = useSelector<AppRootStateType, number>(state => state.count.counterValue)\r\n\r\n    console.log(count)\r\n    // let min = localStorage.getItem(\"minValue\")\r\n    // let max = localStorage.getItem(\"maxValue\")\r\n\r\n    let [minValue, setMinValue] = useState(0);\r\n    let [maxValue, setMaxValue] = useState(0);\r\n    // let [startTableValue, setStartTableValue] = useState(\"Enter value\");\r\n\r\n    // localStorage.setItem(\"minValue\", minValue.toString())\r\n    // localStorage.setItem(\"maxValue\", maxValue.toString())\r\n\r\n    const [disabledButton, setDisabledButton] = useState(false);\r\n\r\n    function summ() {\r\n        if (count < maxValue) {\r\n            dispatch(incrementAC());\r\n        }\r\n        if((maxValue -1) === count){\r\n            setDisabledButton(true)\r\n        }\r\n    }\r\n\r\n    const changeMax = (e: any) => {\r\n        let max = e.currentTarget.value;\r\n\r\n        if (max <= minValue || minValue < 0) {\r\n            setDisabledButton(true)\r\n        } else {\r\n            setDisabledButton(false)\r\n        }\r\n        setMaxValue(Number(max));\r\n    }\r\n\r\n    const changeMin = (e: any) => {\r\n        let min = e.currentTarget.value;\r\n\r\n        if (min > maxValue || minValue < 0) {\r\n            setDisabledButton(true)\r\n        } else {\r\n            setDisabledButton(false)\r\n        }\r\n        setMinValue(Number(min));\r\n    }\r\n\r\n    const reset = () => {\r\n        dispatch(SetToMinValueAC(minValue));\r\n        setDisabledButton(false)\r\n    }\r\n\r\n    // const CLEAR = () => {\r\n    //     setMinValue(minValue = 0);\r\n    //     setMaxValue(maxValue = 0);\r\n    // }\r\n\r\n    // const inc_max = () => {\r\n    //     setMaxValue(+maxValue + 5)\r\n    // }\r\n\r\n\r\n    function Monitor(props: PropsType) {\r\n        return count === maxValue\r\n            ? <span className={s.data_red}>{props.data}</span>\r\n            : <span className={s.data_blue}>{props.data}</span>\r\n    }\r\n\r\n    return (\r\n        <div className={s.App}>\r\n            <div className={s.wrapper}>\r\n                <div>\r\n                    <h3>Counter:</h3><br/>\r\n                </div>\r\n                <div>\r\n                    <Monitor data={count}/>\r\n                </div>\r\n                <div className={s.btnAll}>\r\n                    <button className={s.btn1} onClick={summ} disabled={disabledButton}>Inc</button>\r\n                    <button className={s.btn2} onClick={reset}>Reset</button>\r\n                </div>\r\n                <hr className={s.line}/>\r\n                <div className={s.btnAll}>\r\n                    <div>\r\n                        <span>Max value: </span>\r\n                        <input type=\"number\" value={maxValue} onChange={changeMax}/>\r\n                    </div>\r\n                    <div className={s.ddd}>\r\n                        <span>Min value: </span>\r\n                        <input type=\"number\" value={minValue} onChange={changeMin}/>\r\n                    </div>\r\n                    <button className={s.ddd} onClick={reset}>SET</button>\r\n                    {/*<button className={s.ddd} onClick={CLEAR}>CLEAR</button>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport './App.css';\r\nimport Counter from \"./Counter/Counter\"\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <Counter />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport countReducer from \"./countReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    count: countReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/redux-store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}